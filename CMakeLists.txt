CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(x11_miner)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake-modules/" ${CMAKE_MODULE_PATH})

SET(MINER_BASE_SRC
	${CMAKE_SOURCE_DIR}/src/miner.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/aes_helper.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/blake.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/bmw.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/cubehash.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/echo.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/fugue.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/groestl.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/hamsi.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/hamsi_helper.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/jh.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/keccak.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/luffa.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/shavite.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/simd.cpp
	${CMAKE_SOURCE_DIR}/src/sha3/skein.cpp
	${CMAKE_SOURCE_DIR}/src/util.cpp
	${CMAKE_SOURCE_DIR}/src/x11cpu.cpp
	${CMAKE_SOURCE_DIR}/src/x11opencl.cpp
	${CMAKE_SOURCE_DIR}/src/xmalloc.cpp
)

IF(WIN32)
	SET(MINER_BASE_SRC 
		${MINER_BASE_SRC} 
		${CMAKE_SOURCE_DIR}/src/compat/getopt_long.c 
		${CMAKE_SOURCE_DIR}/src/compat/gettimeofday.c
	)
	SET(CMAKE_EXE_LINKER_FLAGS /NODEFAULTLIB:LIBCMT)
ENDIF(WIN32)

SET(MINER_CUDA_SRC
	${CMAKE_SOURCE_DIR}/src/x11cuda.cu
)

FIND_PACKAGE(CUDA REQUIRED)
IF(NOT CUDA_FOUND)
	MESSAGE(FATAL_ERROR
		"cuda is not found!")
ENDIF()
SET(CUDA_INCLUDES ${CUDA_INCLUDE_DIRS})
SET(CUDA_LIBRARIES ${CUDA_LIBRARIES})

FIND_PACKAGE(OpenCL REQUIRED)
IF(NOT OPENCL_FOUND)
	MESSAGE(FATAL_ERROR
		"OpenCL is not found!")
ENDIF()
SET(OPENCL_INCLUDES ${OpenCL_INCLUDE_DIRS})
SET(OPENCL_LIBRARIES ${OpenCL_LIBRARIES})

FIND_PACKAGE(CURL REQUIRED)
IF(NOT CURL_FOUND)
	MESSAGE(FATAL_ERROR
		"curl is not found!")
ENDIF()
SET(CURL_INCLUDES ${CURL_INCLUDE_DIRS})
SET(CURL_LIBRARIES ${CURL_LIBRARIES})

#FIND_PACKAGE(JANSSON REQUIRED)
#IF(NOT JANSSON_FOUND)
#	MESSAGE(FATAL_ERROR
#		"jansson is not found!")
#ENDIF()
#SET(JANSSON_INCLUDES ${JANSSON_INCLUDE_DIRS})
#SET(JANSSON_LIBRARIES ${JANSSON_LIBRARIES})

IF(CUDA_VERSION_MAJOR LESS 6)
	LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_30)
	LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_35,code=sm_35)
ELSE(CUDA_VERSION_MAJOR LESS 6)
	LIST(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_50,code=sm_50)
ENDIF(CUDA_VERSION_MAJOR LESS 6)


#IF(WIN32)
#	LIST(APPEND CMAKE_CXX_FLAGS "/Zi /nologo /W3 /WX- /O2 /Oi /Oy- /GL /D WIN32 /D NDEBUG /D _CONSOLE /D _MBCS /Gm- /EHsc /MD /GS /Gy /fp:precise /Zc:wchar_t /Zc:forScope ")
#ENDIF(WIN32)

CUDA_ADD_EXECUTABLE(x11_miner ${MINER_BASE_SRC} ${MINER_CUDA_SRC})

TARGET_LINK_LIBRARIES(x11_miner ${CURL_LIBRARIES} ${JANSSON_LIBRARIES} ${OPENCL_LIBRARIES} -ljansson)

IF(WIN32)
	TARGET_LINK_LIBRARIES(x11_miner pthreadVC2.x32.lib)
ENDIF(WIN32)
