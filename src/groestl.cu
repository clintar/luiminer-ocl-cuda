/*
	by Pecho <pecho@2ba.su>
	draft version
	based on SPH
*/

//#include "helper.h"

#define B32_0(x)    ((x) & 0xFF)
#define B32_1(x)    (((x) >> 8) & 0xFF)
#define B32_2(x)    (((x) >> 16) & 0xFF)
#define B32_3(x)    ((x) >> 24)

#define R32u(u, d)   T32(((u) << 16) | ((d) >> 16))
#define R32d(u, d)   T32(((u) >> 16) | ((d) << 16))

#define PC32up(j, r)   ((uint32)((j) + (r)))
#define PC32dn(j, r)   0
#define QC32up(j, r)   (0xFFFFFFFF)
#define QC32dn(j, r)   (((uint32)(r) << 24) ^ T32(~((uint32)(j) << 24)))

__constant__ uint32 T0up[] = {
	0xa5f432c6, 0x84976ff8, 0x99b05eee, 0x8d8c7af6,
	0xd17e8ff, 0xbddc0ad6, 0xb1c816de, 0x54fc6d91,
	0x50f09060, 0x3050702, 0xa9e02ece, 0x7d87d156,
	0x192bcce7, 0x62a613b5, 0xe6317c4d, 0x9ab559ec,
	0x45cf408f, 0x9dbca31f, 0x40c04989, 0x879268fa,
	0x153fd0ef, 0xeb2694b2, 0xc940ce8e, 0xb1de6fb,
	0xec2f6e41, 0x67a91ab3, 0xfd1c435f, 0xea256045,
	0xbfdaf923, 0xf7025153, 0x96a145e4, 0x5bed769b,
	0xc25d2875, 0x1c24c5e1, 0xaee9d43d, 0x6abef24c,
	0x5aee826c, 0x41c3bd7e, 0x206f3f5, 0x4fd15283,
	0x5ce48c68, 0xf4075651, 0x345c8dd1, 0x818e1f9,
	0x93ae4ce2, 0x73953eab, 0x53f59762, 0x3f416b2a,
	0xc141c08, 0x52f66395, 0x65afe946, 0x5ee27f9d,
	0x28784830, 0xa1f8cf37, 0xf111b0a, 0xb5c4eb2f,
	0x91b150e, 0x365a7e24, 0x9bb6ad1b, 0x3d4798df,
	0x266aa7cd, 0x69bbf54e, 0xcd4c337f, 0x9fba50ea,
	0x1b2d3f12, 0x9eb9a41d, 0x749cc458, 0x2e724634,
	0x2d774136, 0xb2cd11dc, 0xee299db4, 0xfb164d5b,
	0xf601a5a4, 0x4dd7a176, 0x61a314b7, 0xce49347d,
	0x7b8ddf52, 0x3e429fdd, 0x7193cd5e, 0x97a2b113,
	0xf504a2a6, 0x68b801b9, 0x0000, 0x2c74b5c1,
	0x60a0e040, 0x1f21c2e3, 0xc8433a79, 0xed2c9ab6,
	0xbed90dd4, 0x46ca478d, 0xd9701767, 0x4bddaf72,
	0xde79ed94, 0xd467ff98, 0xe82393b0, 0x4ade5b85,
	0x6bbd06bb, 0x2a7ebbc5, 0xe5347b4f, 0x163ad7ed,
	0xc554d286, 0xd762f89a, 0x55ff9966, 0x94a7b611,
	0xcf4ac08a, 0x1030d9e9, 0x60a0e04, 0x819866fe,
	0xf00baba0, 0x44ccb478, 0xbad5f025, 0xe33e754b,
	0xf30eaca2, 0xfe19445d, 0xc05bdb80, 0x8a858005,
	0xadecd33f, 0xbcdffe21, 0x48d8a870, 0x40cfdf1,
	0xdf7a1963, 0xc1582f77, 0x759f30af, 0x63a5e742,
	0x30507020, 0x1a2ecbe5, 0xe12effd, 0x6db708bf,
	0x4cd45581, 0x143c2418, 0x355f7926, 0x2f71b2c3,
	0xe13886be, 0xa2fdc835, 0xcc4fc788, 0x394b652e,
	0x57f96a93, 0xf20d5855, 0x829d61fc, 0x47c9b37a,
	0xacef27c8, 0xe73288ba, 0x2b7d4f32, 0x95a442e6,
	0xa0fb3bc0, 0x98b3aa19, 0xd168f69e, 0x7f8122a3,
	0x66aaee44, 0x7e82d654, 0xabe6dd3b, 0x839e950b,
	0xca45c98c, 0x297bbcc7, 0xd36e056b, 0x3c446c28,
	0x798b2ca7, 0xe23d81bc, 0x1d273116, 0x769a37ad,
	0x3b4d96db, 0x56fa9e64, 0x4ed2a674, 0x1e223614,
	0xdb76e492, 0xa1e120c, 0x6cb4fc48, 0xe4378fb8,
	0x5de7789f, 0x6eb20fbd, 0xef2a6943, 0xa6f135c4,
	0xa8e3da39, 0xa4f7c631, 0x37598ad3, 0x8b8674f2,
	0x325683d5, 0x43c54e8b, 0x59eb856e, 0xb7c218da,
	0x8c8f8e01, 0x64ac1db1, 0xd26df19c, 0xe03b7249,
	0xb4c71fd8, 0xfa15b9ac, 0x709faf3, 0x256fa0cf,
	0xafea20ca, 0x8e897df4, 0xe9206747, 0x18283810,
	0xd5640b6f, 0x888373f0, 0x6fb1fb4a, 0x7296ca5c,
	0x246c5438, 0xf1085f57, 0xc7522173, 0x51f36497,
	0x2365aecb, 0x7c8425a1, 0x9cbf57e8, 0x21635d3e,
	0xdd7cea96, 0xdc7f1e61, 0x86919c0d, 0x85949b0f,
	0x90ab4be0, 0x42c6ba7c, 0xc4572671, 0xaae529cc,
	0xd873e390, 0x50f0906, 0x103f4f7, 0x12362a1c,
	0xa3fe3cc2, 0x5fe18b6a, 0xf910beae, 0xd06b0269,
	0x91a8bf17, 0x58e87199, 0x2769533a, 0xb9d0f727,
	0x384891d9, 0x1335deeb, 0xb3cee52b, 0x33557722,
	0xbbd604d2, 0x709039a9, 0x89808707, 0xa7f2c133,
	0xb6c1ec2d, 0x22665a3c, 0x92adb815, 0x2060a9c9,
	0x49db5c87, 0xff1ab0aa, 0x7888d850, 0x7a8e2ba5,
	0x8f8a8903, 0xf8134a59, 0x809b9209, 0x1739231a,
	0xda751065, 0x315384d7, 0xc651d584, 0xb8d303d0,
	0xc35edc82, 0xb0cbe229, 0x7799c35a, 0x11332d1e,
	0xcb463d7b, 0xfc1fb7a8, 0xd6610c6d, 0x3a4e622c,
};

__constant__ uint32 T0dn[] = {
	0xc6a597f4, 0xf884eb97, 0xee99c7b0, 0xf68df78c,
	0xff0de517, 0xd6bdb7dc, 0xdeb1a7c8, 0x915439fc,
	0x6050c0f0, 0x2030405, 0xcea987e0, 0x567dac87,
	0xe719d52b, 0xb56271a6, 0x4de69a31, 0xec9ac3b5,
	0x8f4505cf, 0x1f9d3ebc, 0x894009c0, 0xfa87ef92,
	0xef15c53f, 0xb2eb7f26, 0x8ec90740, 0xfb0bed1d,
	0x41ec822f, 0xb3677da9, 0x5ffdbe1c, 0x45ea8a25,
	0x23bf46da, 0x53f7a602, 0xe496d3a1, 0x9b5b2ded,
	0x75c2ea5d, 0xe11cd924, 0x3dae7ae9, 0x4c6a98be,
	0x6c5ad8ee, 0x7e41fcc3, 0xf502f106, 0x834f1dd1,
	0x685cd0e4, 0x51f4a207, 0xd134b95c, 0xf908e918,
	0xe293dfae, 0xab734d95, 0x6253c4f5, 0x2a3f5441,
	0x80c1014, 0x955231f6, 0x46658caf, 0x9d5e21e2,
	0x30286078, 0x37a16ef8, 0xa0f1411, 0x2fb55ec4,
	0xe091c1b, 0x2436485a, 0x1b9b36b6, 0xdf3da547,
	0xcd26816a, 0x4e699cbb, 0x7fcdfe4c, 0xea9fcfba,
	0x121b242d, 0x1d9e3ab9, 0x5874b09c, 0x342e6872,
	0x362d6c77, 0xdcb2a3cd, 0xb4ee7329, 0x5bfbb616,
	0xa4f65301, 0x764decd7, 0xb76175a3, 0x7dcefa49,
	0x527ba48d, 0xdd3ea142, 0x5e71bc93, 0x139726a2,
	0xa6f55704, 0xb96869b8, 0x0000, 0xc12c9974,
	0x406080a0, 0xe31fdd21, 0x79c8f243, 0xb6ed772c,
	0xd4beb3d9, 0x8d4601ca, 0x67d9ce70, 0x724be4dd,
	0x94de3379, 0x98d42b67, 0xb0e87b23, 0x854a11de,
	0xbb6b6dbd, 0xc52a917e, 0x4fe59e34, 0xed16c13a,
	0x86c51754, 0x9ad72f62, 0x6655ccff, 0x119422a7,
	0x8acf0f4a, 0xe910c930, 0x406080a, 0xfe81e798,
	0xa0f05b0b, 0x7844f0cc, 0x25ba4ad5, 0x4be3963e,
	0xa2f35f0e, 0x5dfeba19, 0x80c01b5b, 0x58a0a85,
	0x3fad7eec, 0x21bc42df, 0x7048e0d8, 0xf104f90c,
	0x63dfc67a, 0x77c1ee58, 0xaf75459f, 0x426384a5,
	0x20304050, 0xe51ad12e, 0xfd0ee112, 0xbf6d65b7,
	0x814c19d4, 0x1814303c, 0x26354c5f, 0xc32f9d71,
	0xbee16738, 0x35a26afd, 0x88cc0b4f, 0x2e395c4b,
	0x93573df9, 0x55f2aa0d, 0xfc82e39d, 0x7a47f4c9,
	0xc8ac8bef, 0xbae76f32, 0x322b647d, 0xe695d7a4,
	0xc0a09bfb, 0x199832b3, 0x9ed12768, 0xa37f5d81,
	0x446688aa, 0x547ea882, 0x3bab76e6, 0xb83169e,
	0x8cca0345, 0xc729957b, 0x6bd3d66e, 0x283c5044,
	0xa779558b, 0xbce2633d, 0x161d2c27, 0xad76419a,
	0xdb3bad4d, 0x6456c8fa, 0x744ee8d2, 0x141e2822,
	0x92db3f76, 0xc0a181e, 0x486c90b4, 0xb8e46b37,
	0x9f5d25e7, 0xbd6e61b2, 0x43ef862a, 0xc4a693f1,
	0x39a872e3, 0x31a462f7, 0xd337bd59, 0xf28bff86,
	0xd532b156, 0x8b430dc5, 0x6e59dceb, 0xdab7afc2,
	0x18c028f, 0xb16479ac, 0x9cd2236d, 0x49e0923b,
	0xd8b4abc7, 0xacfa4315, 0xf307fd09, 0xcf25856f,
	0xcaaf8fea, 0xf48ef389, 0x47e98e20, 0x10182028,
	0x6fd5de64, 0xf088fb83, 0x4a6f94b1, 0x5c72b896,
	0x3824706c, 0x57f1ae08, 0x73c7e652, 0x975135f3,
	0xcb238d65, 0xa17c5984, 0xe89ccbbf, 0x3e217c63,
	0x96dd377c, 0x61dcc27f, 0xd861a91, 0xf851e94,
	0xe090dbab, 0x7c42f8c6, 0x71c4e257, 0xccaa83e5,
	0x90d83b73, 0x6050c0f, 0xf701f503, 0x1c123836,
	0xc2a39ffe, 0x6a5fd4e1, 0xaef94710, 0x69d0d26b,
	0x17912ea8, 0x995829e8, 0x3a277469, 0x27b94ed0,
	0xd938a948, 0xeb13cd35, 0x2bb356ce, 0x22334455,
	0xd2bbbfd6, 0xa9704990, 0x7890e80, 0x33a766f2,
	0x2db65ac1, 0x3c227866, 0x15922aad, 0xc9208960,
	0x874915db, 0xaaff4f1a, 0x5078a088, 0xa57a518e,
	0x38f068a, 0x59f8b213, 0x980129b, 0x1a173439,
	0x65daca75, 0xd731b553, 0x84c61351, 0xd0b8bbd3,
	0x82c31f5e, 0x29b052cb, 0x5a77b499, 0x1e113c33,
	0x7bcbf646, 0xa8fc4b1f, 0x6dd6da61, 0x2c3a584e,
};

__constant__ uint32 T1up[] = {
	0xf432c6c6, 0x976ff8f8, 0xb05eeeee, 0x8c7af6f6,
	0x17e8ffff, 0xdc0ad6d6, 0xc816dede, 0xfc6d9191,
	0xf0906060, 0x5070202, 0xe02ecece, 0x87d15656,
	0x2bcce7e7, 0xa613b5b5, 0x317c4d4d, 0xb559ecec,
	0xcf408f8f, 0xbca31f1f, 0xc0498989, 0x9268fafa,
	0x3fd0efef, 0x2694b2b2, 0x40ce8e8e, 0x1de6fbfb,
	0x2f6e4141, 0xa91ab3b3, 0x1c435f5f, 0x25604545,
	0xdaf92323, 0x2515353, 0xa145e4e4, 0xed769b9b,
	0x5d287575, 0x24c5e1e1, 0xe9d43d3d, 0xbef24c4c,
	0xee826c6c, 0xc3bd7e7e, 0x6f3f5f5, 0xd1528383,
	0xe48c6868, 0x7565151, 0x5c8dd1d1, 0x18e1f9f9,
	0xae4ce2e2, 0x953eabab, 0xf5976262, 0x416b2a2a,
	0x141c0808, 0xf6639595, 0xafe94646, 0xe27f9d9d,
	0x78483030, 0xf8cf3737, 0x111b0a0a, 0xc4eb2f2f,
	0x1b150e0e, 0x5a7e2424, 0xb6ad1b1b, 0x4798dfdf,
	0x6aa7cdcd, 0xbbf54e4e, 0x4c337f7f, 0xba50eaea,
	0x2d3f1212, 0xb9a41d1d, 0x9cc45858, 0x72463434,
	0x77413636, 0xcd11dcdc, 0x299db4b4, 0x164d5b5b,
	0x1a5a4a4, 0xd7a17676, 0xa314b7b7, 0x49347d7d,
	0x8ddf5252, 0x429fdddd, 0x93cd5e5e, 0xa2b11313,
	0x4a2a6a6, 0xb801b9b9, 0x0000, 0x74b5c1c1,
	0xa0e04040, 0x21c2e3e3, 0x433a7979, 0x2c9ab6b6,
	0xd90dd4d4, 0xca478d8d, 0x70176767, 0xddaf7272,
	0x79ed9494, 0x67ff9898, 0x2393b0b0, 0xde5b8585,
	0xbd06bbbb, 0x7ebbc5c5, 0x347b4f4f, 0x3ad7eded,
	0x54d28686, 0x62f89a9a, 0xff996666, 0xa7b61111,
	0x4ac08a8a, 0x30d9e9e9, 0xa0e0404, 0x9866fefe,
	0xbaba0a0, 0xccb47878, 0xd5f02525, 0x3e754b4b,
	0xeaca2a2, 0x19445d5d, 0x5bdb8080, 0x85800505,
	0xecd33f3f, 0xdffe2121, 0xd8a87070, 0xcfdf1f1,
	0x7a196363, 0x582f7777, 0x9f30afaf, 0xa5e74242,
	0x50702020, 0x2ecbe5e5, 0x12effdfd, 0xb708bfbf,
	0xd4558181, 0x3c241818, 0x5f792626, 0x71b2c3c3,
	0x3886bebe, 0xfdc83535, 0x4fc78888, 0x4b652e2e,
	0xf96a9393, 0xd585555, 0x9d61fcfc, 0xc9b37a7a,
	0xef27c8c8, 0x3288baba, 0x7d4f3232, 0xa442e6e6,
	0xfb3bc0c0, 0xb3aa1919, 0x68f69e9e, 0x8122a3a3,
	0xaaee4444, 0x82d65454, 0xe6dd3b3b, 0x9e950b0b,
	0x45c98c8c, 0x7bbcc7c7, 0x6e056b6b, 0x446c2828,
	0x8b2ca7a7, 0x3d81bcbc, 0x27311616, 0x9a37adad,
	0x4d96dbdb, 0xfa9e6464, 0xd2a67474, 0x22361414,
	0x76e49292, 0x1e120c0c, 0xb4fc4848, 0x378fb8b8,
	0xe7789f9f, 0xb20fbdbd, 0x2a694343, 0xf135c4c4,
	0xe3da3939, 0xf7c63131, 0x598ad3d3, 0x8674f2f2,
	0x5683d5d5, 0xc54e8b8b, 0xeb856e6e, 0xc218dada,
	0x8f8e0101, 0xac1db1b1, 0x6df19c9c, 0x3b724949,
	0xc71fd8d8, 0x15b9acac, 0x9faf3f3, 0x6fa0cfcf,
	0xea20caca, 0x897df4f4, 0x20674747, 0x28381010,
	0x640b6f6f, 0x8373f0f0, 0xb1fb4a4a, 0x96ca5c5c,
	0x6c543838, 0x85f5757, 0x52217373, 0xf3649797,
	0x65aecbcb, 0x8425a1a1, 0xbf57e8e8, 0x635d3e3e,
	0x7cea9696, 0x7f1e6161, 0x919c0d0d, 0x949b0f0f,
	0xab4be0e0, 0xc6ba7c7c, 0x57267171, 0xe529cccc,
	0x73e39090, 0xf090606, 0x3f4f7f7, 0x362a1c1c,
	0xfe3cc2c2, 0xe18b6a6a, 0x10beaeae, 0x6b026969,
	0xa8bf1717, 0xe8719999, 0x69533a3a, 0xd0f72727,
	0x4891d9d9, 0x35deebeb, 0xcee52b2b, 0x55772222,
	0xd604d2d2, 0x9039a9a9, 0x80870707, 0xf2c13333,
	0xc1ec2d2d, 0x665a3c3c, 0xadb81515, 0x60a9c9c9,
	0xdb5c8787, 0x1ab0aaaa, 0x88d85050, 0x8e2ba5a5,
	0x8a890303, 0x134a5959, 0x9b920909, 0x39231a1a,
	0x75106565, 0x5384d7d7, 0x51d58484, 0xd303d0d0,
	0x5edc8282, 0xcbe22929, 0x99c35a5a, 0x332d1e1e,
	0x463d7b7b, 0x1fb7a8a8, 0x610c6d6d, 0x4e622c2c,
};

__constant__ uint32 T1dn[] = {
	0xa597f4a5, 0x84eb9784, 0x99c7b099, 0x8df78c8d,
	0xde5170d, 0xbdb7dcbd, 0xb1a7c8b1, 0x5439fc54,
	0x50c0f050, 0x3040503, 0xa987e0a9, 0x7dac877d,
	0x19d52b19, 0x6271a662, 0xe69a31e6, 0x9ac3b59a,
	0x4505cf45, 0x9d3ebc9d, 0x4009c040, 0x87ef9287,
	0x15c53f15, 0xeb7f26eb, 0xc90740c9, 0xbed1d0b,
	0xec822fec, 0x677da967, 0xfdbe1cfd, 0xea8a25ea,
	0xbf46dabf, 0xf7a602f7, 0x96d3a196, 0x5b2ded5b,
	0xc2ea5dc2, 0x1cd9241c, 0xae7ae9ae, 0x6a98be6a,
	0x5ad8ee5a, 0x41fcc341, 0x2f10602, 0x4f1dd14f,
	0x5cd0e45c, 0xf4a207f4, 0x34b95c34, 0x8e91808,
	0x93dfae93, 0x734d9573, 0x53c4f553, 0x3f54413f,
	0xc10140c, 0x5231f652, 0x658caf65, 0x5e21e25e,
	0x28607828, 0xa16ef8a1, 0xf14110f, 0xb55ec4b5,
	0x91c1b09, 0x36485a36, 0x9b36b69b, 0x3da5473d,
	0x26816a26, 0x699cbb69, 0xcdfe4ccd, 0x9fcfba9f,
	0x1b242d1b, 0x9e3ab99e, 0x74b09c74, 0x2e68722e,
	0x2d6c772d, 0xb2a3cdb2, 0xee7329ee, 0xfbb616fb,
	0xf65301f6, 0x4decd74d, 0x6175a361, 0xcefa49ce,
	0x7ba48d7b, 0x3ea1423e, 0x71bc9371, 0x9726a297,
	0xf55704f5, 0x6869b868, 0x0000, 0x2c99742c,
	0x6080a060, 0x1fdd211f, 0xc8f243c8, 0xed772ced,
	0xbeb3d9be, 0x4601ca46, 0xd9ce70d9, 0x4be4dd4b,
	0xde3379de, 0xd42b67d4, 0xe87b23e8, 0x4a11de4a,
	0x6b6dbd6b, 0x2a917e2a, 0xe59e34e5, 0x16c13a16,
	0xc51754c5, 0xd72f62d7, 0x55ccff55, 0x9422a794,
	0xcf0f4acf, 0x10c93010, 0x6080a06, 0x81e79881,
	0xf05b0bf0, 0x44f0cc44, 0xba4ad5ba, 0xe3963ee3,
	0xf35f0ef3, 0xfeba19fe, 0xc01b5bc0, 0x8a0a858a,
	0xad7eecad, 0xbc42dfbc, 0x48e0d848, 0x4f90c04,
	0xdfc67adf, 0xc1ee58c1, 0x75459f75, 0x6384a563,
	0x30405030, 0x1ad12e1a, 0xee1120e, 0x6d65b76d,
	0x4c19d44c, 0x14303c14, 0x354c5f35, 0x2f9d712f,
	0xe16738e1, 0xa26afda2, 0xcc0b4fcc, 0x395c4b39,
	0x573df957, 0xf2aa0df2, 0x82e39d82, 0x47f4c947,
	0xac8befac, 0xe76f32e7, 0x2b647d2b, 0x95d7a495,
	0xa09bfba0, 0x9832b398, 0xd12768d1, 0x7f5d817f,
	0x6688aa66, 0x7ea8827e, 0xab76e6ab, 0x83169e83,
	0xca0345ca, 0x29957b29, 0xd3d66ed3, 0x3c50443c,
	0x79558b79, 0xe2633de2, 0x1d2c271d, 0x76419a76,
	0x3bad4d3b, 0x56c8fa56, 0x4ee8d24e, 0x1e28221e,
	0xdb3f76db, 0xa181e0a, 0x6c90b46c, 0xe46b37e4,
	0x5d25e75d, 0x6e61b26e, 0xef862aef, 0xa693f1a6,
	0xa872e3a8, 0xa462f7a4, 0x37bd5937, 0x8bff868b,
	0x32b15632, 0x430dc543, 0x59dceb59, 0xb7afc2b7,
	0x8c028f8c, 0x6479ac64, 0xd2236dd2, 0xe0923be0,
	0xb4abc7b4, 0xfa4315fa, 0x7fd0907, 0x25856f25,
	0xaf8feaaf, 0x8ef3898e, 0xe98e20e9, 0x18202818,
	0xd5de64d5, 0x88fb8388, 0x6f94b16f, 0x72b89672,
	0x24706c24, 0xf1ae08f1, 0xc7e652c7, 0x5135f351,
	0x238d6523, 0x7c59847c, 0x9ccbbf9c, 0x217c6321,
	0xdd377cdd, 0xdcc27fdc, 0x861a9186, 0x851e9485,
	0x90dbab90, 0x42f8c642, 0xc4e257c4, 0xaa83e5aa,
	0xd83b73d8, 0x50c0f05, 0x1f50301, 0x12383612,
	0xa39ffea3, 0x5fd4e15f, 0xf94710f9, 0xd0d26bd0,
	0x912ea891, 0x5829e858, 0x27746927, 0xb94ed0b9,
	0x38a94838, 0x13cd3513, 0xb356ceb3, 0x33445533,
	0xbbbfd6bb, 0x70499070, 0x890e8089, 0xa766f2a7,
	0xb65ac1b6, 0x22786622, 0x922aad92, 0x20896020,
	0x4915db49, 0xff4f1aff, 0x78a08878, 0x7a518e7a,
	0x8f068a8f, 0xf8b213f8, 0x80129b80, 0x17343917,
	0xdaca75da, 0x31b55331, 0xc61351c6, 0xb8bbd3b8,
	0xc31f5ec3, 0xb052cbb0, 0x77b49977, 0x113c3311,
	0xcbf646cb, 0xfc4b1ffc, 0xd6da61d6, 0x3a584e3a,
};

__constant__ uint32 T2up[] = {
	0x32c6c6a5, 0x6ff8f884, 0x5eeeee99, 0x7af6f68d,
	0xe8ffff0d, 0xad6d6bd, 0x16dedeb1, 0x6d919154,
	0x90606050, 0x7020203, 0x2ececea9, 0xd156567d,
	0xcce7e719, 0x13b5b562, 0x7c4d4de6, 0x59ecec9a,
	0x408f8f45, 0xa31f1f9d, 0x49898940, 0x68fafa87,
	0xd0efef15, 0x94b2b2eb, 0xce8e8ec9, 0xe6fbfb0b,
	0x6e4141ec, 0x1ab3b367, 0x435f5ffd, 0x604545ea,
	0xf92323bf, 0x515353f7, 0x45e4e496, 0x769b9b5b,
	0x287575c2, 0xc5e1e11c, 0xd43d3dae, 0xf24c4c6a,
	0x826c6c5a, 0xbd7e7e41, 0xf3f5f502, 0x5283834f,
	0x8c68685c, 0x565151f4, 0x8dd1d134, 0xe1f9f908,
	0x4ce2e293, 0x3eabab73, 0x97626253, 0x6b2a2a3f,
	0x1c08080c, 0x63959552, 0xe9464665, 0x7f9d9d5e,
	0x48303028, 0xcf3737a1, 0x1b0a0a0f, 0xeb2f2fb5,
	0x150e0e09, 0x7e242436, 0xad1b1b9b, 0x98dfdf3d,
	0xa7cdcd26, 0xf54e4e69, 0x337f7fcd, 0x50eaea9f,
	0x3f12121b, 0xa41d1d9e, 0xc4585874, 0x4634342e,
	0x4136362d, 0x11dcdcb2, 0x9db4b4ee, 0x4d5b5bfb,
	0xa5a4a4f6, 0xa176764d, 0x14b7b761, 0x347d7dce,
	0xdf52527b, 0x9fdddd3e, 0xcd5e5e71, 0xb1131397,
	0xa2a6a6f5, 0x1b9b968, 0x0000, 0xb5c1c12c,
	0xe0404060, 0xc2e3e31f, 0x3a7979c8, 0x9ab6b6ed,
	0xdd4d4be, 0x478d8d46, 0x176767d9, 0xaf72724b,
	0xed9494de, 0xff9898d4, 0x93b0b0e8, 0x5b85854a,
	0x6bbbb6b, 0xbbc5c52a, 0x7b4f4fe5, 0xd7eded16,
	0xd28686c5, 0xf89a9ad7, 0x99666655, 0xb6111194,
	0xc08a8acf, 0xd9e9e910, 0xe040406, 0x66fefe81,
	0xaba0a0f0, 0xb4787844, 0xf02525ba, 0x754b4be3,
	0xaca2a2f3, 0x445d5dfe, 0xdb8080c0, 0x8005058a,
	0xd33f3fad, 0xfe2121bc, 0xa8707048, 0xfdf1f104,
	0x196363df, 0x2f7777c1, 0x30afaf75, 0xe7424263,
	0x70202030, 0xcbe5e51a, 0xeffdfd0e, 0x8bfbf6d,
	0x5581814c, 0x24181814, 0x79262635, 0xb2c3c32f,
	0x86bebee1, 0xc83535a2, 0xc78888cc, 0x652e2e39,
	0x6a939357, 0x585555f2, 0x61fcfc82, 0xb37a7a47,
	0x27c8c8ac, 0x88babae7, 0x4f32322b, 0x42e6e695,
	0x3bc0c0a0, 0xaa191998, 0xf69e9ed1, 0x22a3a37f,
	0xee444466, 0xd654547e, 0xdd3b3bab, 0x950b0b83,
	0xc98c8cca, 0xbcc7c729, 0x56b6bd3, 0x6c28283c,
	0x2ca7a779, 0x81bcbce2, 0x3116161d, 0x37adad76,
	0x96dbdb3b, 0x9e646456, 0xa674744e, 0x3614141e,
	0xe49292db, 0x120c0c0a, 0xfc48486c, 0x8fb8b8e4,
	0x789f9f5d, 0xfbdbd6e, 0x694343ef, 0x35c4c4a6,
	0xda3939a8, 0xc63131a4, 0x8ad3d337, 0x74f2f28b,
	0x83d5d532, 0x4e8b8b43, 0x856e6e59, 0x18dadab7,
	0x8e01018c, 0x1db1b164, 0xf19c9cd2, 0x724949e0,
	0x1fd8d8b4, 0xb9acacfa, 0xfaf3f307, 0xa0cfcf25,
	0x20cacaaf, 0x7df4f48e, 0x674747e9, 0x38101018,
	0xb6f6fd5, 0x73f0f088, 0xfb4a4a6f, 0xca5c5c72,
	0x54383824, 0x5f5757f1, 0x217373c7, 0x64979751,
	0xaecbcb23, 0x25a1a17c, 0x57e8e89c, 0x5d3e3e21,
	0xea9696dd, 0x1e6161dc, 0x9c0d0d86, 0x9b0f0f85,
	0x4be0e090, 0xba7c7c42, 0x267171c4, 0x29ccccaa,
	0xe39090d8, 0x9060605, 0xf4f7f701, 0x2a1c1c12,
	0x3cc2c2a3, 0x8b6a6a5f, 0xbeaeaef9, 0x26969d0,
	0xbf171791, 0x71999958, 0x533a3a27, 0xf72727b9,
	0x91d9d938, 0xdeebeb13, 0xe52b2bb3, 0x77222233,
	0x4d2d2bb, 0x39a9a970, 0x87070789, 0xc13333a7,
	0xec2d2db6, 0x5a3c3c22, 0xb8151592, 0xa9c9c920,
	0x5c878749, 0xb0aaaaff, 0xd8505078, 0x2ba5a57a,
	0x8903038f, 0x4a5959f8, 0x92090980, 0x231a1a17,
	0x106565da, 0x84d7d731, 0xd58484c6, 0x3d0d0b8,
	0xdc8282c3, 0xe22929b0, 0xc35a5a77, 0x2d1e1e11,
	0x3d7b7bcb, 0xb7a8a8fc, 0xc6d6dd6, 0x622c2c3a,
};

__constant__ uint32 T2dn[] = {
	0x97f4a5f4, 0xeb978497, 0xc7b099b0, 0xf78c8d8c,
	0xe5170d17, 0xb7dcbddc, 0xa7c8b1c8, 0x39fc54fc,
	0xc0f050f0, 0x4050305, 0x87e0a9e0, 0xac877d87,
	0xd52b192b, 0x71a662a6, 0x9a31e631, 0xc3b59ab5,
	0x5cf45cf, 0x3ebc9dbc, 0x9c040c0, 0xef928792,
	0xc53f153f, 0x7f26eb26, 0x740c940, 0xed1d0b1d,
	0x822fec2f, 0x7da967a9, 0xbe1cfd1c, 0x8a25ea25,
	0x46dabfda, 0xa602f702, 0xd3a196a1, 0x2ded5bed,
	0xea5dc25d, 0xd9241c24, 0x7ae9aee9, 0x98be6abe,
	0xd8ee5aee, 0xfcc341c3, 0xf1060206, 0x1dd14fd1,
	0xd0e45ce4, 0xa207f407, 0xb95c345c, 0xe9180818,
	0xdfae93ae, 0x4d957395, 0xc4f553f5, 0x54413f41,
	0x10140c14, 0x31f652f6, 0x8caf65af, 0x21e25ee2,
	0x60782878, 0x6ef8a1f8, 0x14110f11, 0x5ec4b5c4,
	0x1c1b091b, 0x485a365a, 0x36b69bb6, 0xa5473d47,
	0x816a266a, 0x9cbb69bb, 0xfe4ccd4c, 0xcfba9fba,
	0x242d1b2d, 0x3ab99eb9, 0xb09c749c, 0x68722e72,
	0x6c772d77, 0xa3cdb2cd, 0x7329ee29, 0xb616fb16,
	0x5301f601, 0xecd74dd7, 0x75a361a3, 0xfa49ce49,
	0xa48d7b8d, 0xa1423e42, 0xbc937193, 0x26a297a2,
	0x5704f504, 0x69b868b8, 0x0000, 0x99742c74,
	0x80a060a0, 0xdd211f21, 0xf243c843, 0x772ced2c,
	0xb3d9bed9, 0x1ca46ca, 0xce70d970, 0xe4dd4bdd,
	0x3379de79, 0x2b67d467, 0x7b23e823, 0x11de4ade,
	0x6dbd6bbd, 0x917e2a7e, 0x9e34e534, 0xc13a163a,
	0x1754c554, 0x2f62d762, 0xccff55ff, 0x22a794a7,
	0xf4acf4a, 0xc9301030, 0x80a060a, 0xe7988198,
	0x5b0bf00b, 0xf0cc44cc, 0x4ad5bad5, 0x963ee33e,
	0x5f0ef30e, 0xba19fe19, 0x1b5bc05b, 0xa858a85,
	0x7eecadec, 0x42dfbcdf, 0xe0d848d8, 0xf90c040c,
	0xc67adf7a, 0xee58c158, 0x459f759f, 0x84a563a5,
	0x40503050, 0xd12e1a2e, 0xe1120e12, 0x65b76db7,
	0x19d44cd4, 0x303c143c, 0x4c5f355f, 0x9d712f71,
	0x6738e138, 0x6afda2fd, 0xb4fcc4f, 0x5c4b394b,
	0x3df957f9, 0xaa0df20d, 0xe39d829d, 0xf4c947c9,
	0x8befacef, 0x6f32e732, 0x647d2b7d, 0xd7a495a4,
	0x9bfba0fb, 0x32b398b3, 0x2768d168, 0x5d817f81,
	0x88aa66aa, 0xa8827e82, 0x76e6abe6, 0x169e839e,
	0x345ca45, 0x957b297b, 0xd66ed36e, 0x50443c44,
	0x558b798b, 0x633de23d, 0x2c271d27, 0x419a769a,
	0xad4d3b4d, 0xc8fa56fa, 0xe8d24ed2, 0x28221e22,
	0x3f76db76, 0x181e0a1e, 0x90b46cb4, 0x6b37e437,
	0x25e75de7, 0x61b26eb2, 0x862aef2a, 0x93f1a6f1,
	0x72e3a8e3, 0x62f7a4f7, 0xbd593759, 0xff868b86,
	0xb1563256, 0xdc543c5, 0xdceb59eb, 0xafc2b7c2,
	0x28f8c8f, 0x79ac64ac, 0x236dd26d, 0x923be03b,
	0xabc7b4c7, 0x4315fa15, 0xfd090709, 0x856f256f,
	0x8feaafea, 0xf3898e89, 0x8e20e920, 0x20281828,
	0xde64d564, 0xfb838883, 0x94b16fb1, 0xb8967296,
	0x706c246c, 0xae08f108, 0xe652c752, 0x35f351f3,
	0x8d652365, 0x59847c84, 0xcbbf9cbf, 0x7c632163,
	0x377cdd7c, 0xc27fdc7f, 0x1a918691, 0x1e948594,
	0xdbab90ab, 0xf8c642c6, 0xe257c457, 0x83e5aae5,
	0x3b73d873, 0xc0f050f, 0xf5030103, 0x38361236,
	0x9ffea3fe, 0xd4e15fe1, 0x4710f910, 0xd26bd06b,
	0x2ea891a8, 0x29e858e8, 0x74692769, 0x4ed0b9d0,
	0xa9483848, 0xcd351335, 0x56ceb3ce, 0x44553355,
	0xbfd6bbd6, 0x49907090, 0xe808980, 0x66f2a7f2,
	0x5ac1b6c1, 0x78662266, 0x2aad92ad, 0x89602060,
	0x15db49db, 0x4f1aff1a, 0xa0887888, 0x518e7a8e,
	0x68a8f8a, 0xb213f813, 0x129b809b, 0x34391739,
	0xca75da75, 0xb5533153, 0x1351c651, 0xbbd3b8d3,
	0x1f5ec35e, 0x52cbb0cb, 0xb4997799, 0x3c331133,
	0xf646cb46, 0x4b1ffc1f, 0xda61d661, 0x584e3a4e,
};

__constant__ uint32 T3up[] = {
	0xc6c6a597, 0xf8f884eb, 0xeeee99c7, 0xf6f68df7,
	0xffff0de5, 0xd6d6bdb7, 0xdedeb1a7, 0x91915439,
	0x606050c0, 0x2020304, 0xcecea987, 0x56567dac,
	0xe7e719d5, 0xb5b56271, 0x4d4de69a, 0xecec9ac3,
	0x8f8f4505, 0x1f1f9d3e, 0x89894009, 0xfafa87ef,
	0xefef15c5, 0xb2b2eb7f, 0x8e8ec907, 0xfbfb0bed,
	0x4141ec82, 0xb3b3677d, 0x5f5ffdbe, 0x4545ea8a,
	0x2323bf46, 0x5353f7a6, 0xe4e496d3, 0x9b9b5b2d,
	0x7575c2ea, 0xe1e11cd9, 0x3d3dae7a, 0x4c4c6a98,
	0x6c6c5ad8, 0x7e7e41fc, 0xf5f502f1, 0x83834f1d,
	0x68685cd0, 0x5151f4a2, 0xd1d134b9, 0xf9f908e9,
	0xe2e293df, 0xabab734d, 0x626253c4, 0x2a2a3f54,
	0x8080c10, 0x95955231, 0x4646658c, 0x9d9d5e21,
	0x30302860, 0x3737a16e, 0xa0a0f14, 0x2f2fb55e,
	0xe0e091c, 0x24243648, 0x1b1b9b36, 0xdfdf3da5,
	0xcdcd2681, 0x4e4e699c, 0x7f7fcdfe, 0xeaea9fcf,
	0x12121b24, 0x1d1d9e3a, 0x585874b0, 0x34342e68,
	0x36362d6c, 0xdcdcb2a3, 0xb4b4ee73, 0x5b5bfbb6,
	0xa4a4f653, 0x76764dec, 0xb7b76175, 0x7d7dcefa,
	0x52527ba4, 0xdddd3ea1, 0x5e5e71bc, 0x13139726,
	0xa6a6f557, 0xb9b96869, 0x0000, 0xc1c12c99,
	0x40406080, 0xe3e31fdd, 0x7979c8f2, 0xb6b6ed77,
	0xd4d4beb3, 0x8d8d4601, 0x6767d9ce, 0x72724be4,
	0x9494de33, 0x9898d42b, 0xb0b0e87b, 0x85854a11,
	0xbbbb6b6d, 0xc5c52a91, 0x4f4fe59e, 0xeded16c1,
	0x8686c517, 0x9a9ad72f, 0x666655cc, 0x11119422,
	0x8a8acf0f, 0xe9e910c9, 0x4040608, 0xfefe81e7,
	0xa0a0f05b, 0x787844f0, 0x2525ba4a, 0x4b4be396,
	0xa2a2f35f, 0x5d5dfeba, 0x8080c01b, 0x5058a0a,
	0x3f3fad7e, 0x2121bc42, 0x707048e0, 0xf1f104f9,
	0x6363dfc6, 0x7777c1ee, 0xafaf7545, 0x42426384,
	0x20203040, 0xe5e51ad1, 0xfdfd0ee1, 0xbfbf6d65,
	0x81814c19, 0x18181430, 0x2626354c, 0xc3c32f9d,
	0xbebee167, 0x3535a26a, 0x8888cc0b, 0x2e2e395c,
	0x9393573d, 0x5555f2aa, 0xfcfc82e3, 0x7a7a47f4,
	0xc8c8ac8b, 0xbabae76f, 0x32322b64, 0xe6e695d7,
	0xc0c0a09b, 0x19199832, 0x9e9ed127, 0xa3a37f5d,
	0x44446688, 0x54547ea8, 0x3b3bab76, 0xb0b8316,
	0x8c8cca03, 0xc7c72995, 0x6b6bd3d6, 0x28283c50,
	0xa7a77955, 0xbcbce263, 0x16161d2c, 0xadad7641,
	0xdbdb3bad, 0x646456c8, 0x74744ee8, 0x14141e28,
	0x9292db3f, 0xc0c0a18, 0x48486c90, 0xb8b8e46b,
	0x9f9f5d25, 0xbdbd6e61, 0x4343ef86, 0xc4c4a693,
	0x3939a872, 0x3131a462, 0xd3d337bd, 0xf2f28bff,
	0xd5d532b1, 0x8b8b430d, 0x6e6e59dc, 0xdadab7af,
	0x1018c02, 0xb1b16479, 0x9c9cd223, 0x4949e092,
	0xd8d8b4ab, 0xacacfa43, 0xf3f307fd, 0xcfcf2585,
	0xcacaaf8f, 0xf4f48ef3, 0x4747e98e, 0x10101820,
	0x6f6fd5de, 0xf0f088fb, 0x4a4a6f94, 0x5c5c72b8,
	0x38382470, 0x5757f1ae, 0x7373c7e6, 0x97975135,
	0xcbcb238d, 0xa1a17c59, 0xe8e89ccb, 0x3e3e217c,
	0x9696dd37, 0x6161dcc2, 0xd0d861a, 0xf0f851e,
	0xe0e090db, 0x7c7c42f8, 0x7171c4e2, 0xccccaa83,
	0x9090d83b, 0x606050c, 0xf7f701f5, 0x1c1c1238,
	0xc2c2a39f, 0x6a6a5fd4, 0xaeaef947, 0x6969d0d2,
	0x1717912e, 0x99995829, 0x3a3a2774, 0x2727b94e,
	0xd9d938a9, 0xebeb13cd, 0x2b2bb356, 0x22223344,
	0xd2d2bbbf, 0xa9a97049, 0x707890e, 0x3333a766,
	0x2d2db65a, 0x3c3c2278, 0x1515922a, 0xc9c92089,
	0x87874915, 0xaaaaff4f, 0x505078a0, 0xa5a57a51,
	0x3038f06, 0x5959f8b2, 0x9098012, 0x1a1a1734,
	0x6565daca, 0xd7d731b5, 0x8484c613, 0xd0d0b8bb,
	0x8282c31f, 0x2929b052, 0x5a5a77b4, 0x1e1e113c,
	0x7b7bcbf6, 0xa8a8fc4b, 0x6d6dd6da, 0x2c2c3a58,
};

__constant__ uint32 T3dn[] = {
	0xf4a5f432, 0x9784976f, 0xb099b05e, 0x8c8d8c7a,
	0x170d17e8, 0xdcbddc0a, 0xc8b1c816, 0xfc54fc6d,
	0xf050f090, 0x5030507, 0xe0a9e02e, 0x877d87d1,
	0x2b192bcc, 0xa662a613, 0x31e6317c, 0xb59ab559,
	0xcf45cf40, 0xbc9dbca3, 0xc040c049, 0x92879268,
	0x3f153fd0, 0x26eb2694, 0x40c940ce, 0x1d0b1de6,
	0x2fec2f6e, 0xa967a91a, 0x1cfd1c43, 0x25ea2560,
	0xdabfdaf9, 0x2f70251, 0xa196a145, 0xed5bed76,
	0x5dc25d28, 0x241c24c5, 0xe9aee9d4, 0xbe6abef2,
	0xee5aee82, 0xc341c3bd, 0x60206f3, 0xd14fd152,
	0xe45ce48c, 0x7f40756, 0x5c345c8d, 0x180818e1,
	0xae93ae4c, 0x9573953e, 0xf553f597, 0x413f416b,
	0x140c141c, 0xf652f663, 0xaf65afe9, 0xe25ee27f,
	0x78287848, 0xf8a1f8cf, 0x110f111b, 0xc4b5c4eb,
	0x1b091b15, 0x5a365a7e, 0xb69bb6ad, 0x473d4798,
	0x6a266aa7, 0xbb69bbf5, 0x4ccd4c33, 0xba9fba50,
	0x2d1b2d3f, 0xb99eb9a4, 0x9c749cc4, 0x722e7246,
	0x772d7741, 0xcdb2cd11, 0x29ee299d, 0x16fb164d,
	0x1f601a5, 0xd74dd7a1, 0xa361a314, 0x49ce4934,
	0x8d7b8ddf, 0x423e429f, 0x937193cd, 0xa297a2b1,
	0x4f504a2, 0xb868b801, 0x0000, 0x742c74b5,
	0xa060a0e0, 0x211f21c2, 0x43c8433a, 0x2ced2c9a,
	0xd9bed90d, 0xca46ca47, 0x70d97017, 0xdd4bddaf,
	0x79de79ed, 0x67d467ff, 0x23e82393, 0xde4ade5b,
	0xbd6bbd06, 0x7e2a7ebb, 0x34e5347b, 0x3a163ad7,
	0x54c554d2, 0x62d762f8, 0xff55ff99, 0xa794a7b6,
	0x4acf4ac0, 0x301030d9, 0xa060a0e, 0x98819866,
	0xbf00bab, 0xcc44ccb4, 0xd5bad5f0, 0x3ee33e75,
	0xef30eac, 0x19fe1944, 0x5bc05bdb, 0x858a8580,
	0xecadecd3, 0xdfbcdffe, 0xd848d8a8, 0xc040cfd,
	0x7adf7a19, 0x58c1582f, 0x9f759f30, 0xa563a5e7,
	0x50305070, 0x2e1a2ecb, 0x120e12ef, 0xb76db708,
	0xd44cd455, 0x3c143c24, 0x5f355f79, 0x712f71b2,
	0x38e13886, 0xfda2fdc8, 0x4fcc4fc7, 0x4b394b65,
	0xf957f96a, 0xdf20d58, 0x9d829d61, 0xc947c9b3,
	0xefacef27, 0x32e73288, 0x7d2b7d4f, 0xa495a442,
	0xfba0fb3b, 0xb398b3aa, 0x68d168f6, 0x817f8122,
	0xaa66aaee, 0x827e82d6, 0xe6abe6dd, 0x9e839e95,
	0x45ca45c9, 0x7b297bbc, 0x6ed36e05, 0x443c446c,
	0x8b798b2c, 0x3de23d81, 0x271d2731, 0x9a769a37,
	0x4d3b4d96, 0xfa56fa9e, 0xd24ed2a6, 0x221e2236,
	0x76db76e4, 0x1e0a1e12, 0xb46cb4fc, 0x37e4378f,
	0xe75de778, 0xb26eb20f, 0x2aef2a69, 0xf1a6f135,
	0xe3a8e3da, 0xf7a4f7c6, 0x5937598a, 0x868b8674,
	0x56325683, 0xc543c54e, 0xeb59eb85, 0xc2b7c218,
	0x8f8c8f8e, 0xac64ac1d, 0x6dd26df1, 0x3be03b72,
	0xc7b4c71f, 0x15fa15b9, 0x90709fa, 0x6f256fa0,
	0xeaafea20, 0x898e897d, 0x20e92067, 0x28182838,
	0x64d5640b, 0x83888373, 0xb16fb1fb, 0x967296ca,
	0x6c246c54, 0x8f1085f, 0x52c75221, 0xf351f364,
	0x652365ae, 0x847c8425, 0xbf9cbf57, 0x6321635d,
	0x7cdd7cea, 0x7fdc7f1e, 0x9186919c, 0x9485949b,
	0xab90ab4b, 0xc642c6ba, 0x57c45726, 0xe5aae529,
	0x73d873e3, 0xf050f09, 0x30103f4, 0x3612362a,
	0xfea3fe3c, 0xe15fe18b, 0x10f910be, 0x6bd06b02,
	0xa891a8bf, 0xe858e871, 0x69276953, 0xd0b9d0f7,
	0x48384891, 0x351335de, 0xceb3cee5, 0x55335577,
	0xd6bbd604, 0x90709039, 0x80898087, 0xf2a7f2c1,
	0xc1b6c1ec, 0x6622665a, 0xad92adb8, 0x602060a9,
	0xdb49db5c, 0x1aff1ab0, 0x887888d8, 0x8e7a8e2b,
	0x8a8f8a89, 0x13f8134a, 0x9b809b92, 0x39173923,
	0x75da7510, 0x53315384, 0x51c651d5, 0xd3b8d303,
	0x5ec35edc, 0xcbb0cbe2, 0x997799c3, 0x3311332d,
	0x46cb463d, 0x1ffc1fb7, 0x61d6610c, 0x4e3a4e62,
};

#define RBTT(d0, d1, a, b0, b1, b2, b3, b4, b5, b6, b7)   do { \
		uint32 fu2 = T0up[B32_2(a[b2])]; \
		uint32 fd2 = T0dn[B32_2(a[b2])]; \
		uint32 fu3 = T1up[B32_3(a[b3])]; \
		uint32 fd3 = T1dn[B32_3(a[b3])]; \
		uint32 fu6 = T0up[B32_2(a[b6])]; \
		uint32 fd6 = T0dn[B32_2(a[b6])]; \
		uint32 fu7 = T1up[B32_3(a[b7])]; \
		uint32 fd7 = T1dn[B32_3(a[b7])]; \
		t[d0] = T0up[B32_0(a[b0])] \
			^ T1up[B32_1(a[b1])] \
			^ R32u(fu2, fd2) \
			^ R32u(fu3, fd3) \
			^ T0dn[B32_0(a[b4])] \
			^ T1dn[B32_1(a[b5])] \
			^ R32d(fu6, fd6) \
			^ R32d(fu7, fd7); \
		t[d1] = T0dn[B32_0(a[b0])] \
			^ T1dn[B32_1(a[b1])] \
			^ R32d(fu2, fd2) \
			^ R32d(fu3, fd3) \
			^ T0up[B32_0(a[b4])] \
			^ T1up[B32_1(a[b5])] \
			^ R32u(fu6, fd6) \
			^ R32u(fu7, fd7); \
	} while (0)

#define ROUND_BIG_P(a, r)   do { \
		uint32 t[32]; \
		size_t u; \
		a[0x00] ^= PC32up(0x00, r); \
		a[0x01] ^= PC32dn(0x00, r); \
		a[0x02] ^= PC32up(0x10, r); \
		a[0x03] ^= PC32dn(0x10, r); \
		a[0x04] ^= PC32up(0x20, r); \
		a[0x05] ^= PC32dn(0x20, r); \
		a[0x06] ^= PC32up(0x30, r); \
		a[0x07] ^= PC32dn(0x30, r); \
		a[0x08] ^= PC32up(0x40, r); \
		a[0x09] ^= PC32dn(0x40, r); \
		a[0x0A] ^= PC32up(0x50, r); \
		a[0x0B] ^= PC32dn(0x50, r); \
		a[0x0C] ^= PC32up(0x60, r); \
		a[0x0D] ^= PC32dn(0x60, r); \
		a[0x0E] ^= PC32up(0x70, r); \
		a[0x0F] ^= PC32dn(0x70, r); \
		a[0x10] ^= PC32up(0x80, r); \
		a[0x11] ^= PC32dn(0x80, r); \
		a[0x12] ^= PC32up(0x90, r); \
		a[0x13] ^= PC32dn(0x90, r); \
		a[0x14] ^= PC32up(0xA0, r); \
		a[0x15] ^= PC32dn(0xA0, r); \
		a[0x16] ^= PC32up(0xB0, r); \
		a[0x17] ^= PC32dn(0xB0, r); \
		a[0x18] ^= PC32up(0xC0, r); \
		a[0x19] ^= PC32dn(0xC0, r); \
		a[0x1A] ^= PC32up(0xD0, r); \
		a[0x1B] ^= PC32dn(0xD0, r); \
		a[0x1C] ^= PC32up(0xE0, r); \
		a[0x1D] ^= PC32dn(0xE0, r); \
		a[0x1E] ^= PC32up(0xF0, r); \
		a[0x1F] ^= PC32dn(0xF0, r); \
		for (u = 0; u < 32; u += 8) { \
			RBTT(u + 0x00, (u + 0x01) & 0x1F, a, \
				u + 0x00, (u + 0x02) & 0x1F, \
				(u + 0x04) & 0x1F, (u + 0x06) & 0x1F, \
				(u + 0x09) & 0x1F, (u + 0x0B) & 0x1F, \
				(u + 0x0D) & 0x1F, (u + 0x17) & 0x1F); \
			RBTT(u + 0x02, (u + 0x03) & 0x1F, a, \
				u + 0x02, (u + 0x04) & 0x1F, \
				(u + 0x06) & 0x1F, (u + 0x08) & 0x1F, \
				(u + 0x0B) & 0x1F, (u + 0x0D) & 0x1F, \
				(u + 0x0F) & 0x1F, (u + 0x19) & 0x1F); \
			RBTT(u + 0x04, (u + 0x05) & 0x1F, a, \
				u + 0x04, (u + 0x06) & 0x1F, \
				(u + 0x08) & 0x1F, (u + 0x0A) & 0x1F, \
				(u + 0x0D) & 0x1F, (u + 0x0F) & 0x1F, \
				(u + 0x11) & 0x1F, (u + 0x1B) & 0x1F); \
			RBTT(u + 0x06, (u + 0x07) & 0x1F, a, \
				u + 0x06, (u + 0x08) & 0x1F, \
				(u + 0x0A) & 0x1F, (u + 0x0C) & 0x1F, \
				(u + 0x0F) & 0x1F, (u + 0x11) & 0x1F, \
				(u + 0x13) & 0x1F, (u + 0x1D) & 0x1F); \
		} \
		memcpy(a, t, sizeof t); \
	} while (0)

#define ROUND_BIG_Q(a, r)   do { \
		uint32 t[32]; \
		size_t u; \
		a[0x00] ^= QC32up(0x00, r); \
		a[0x01] ^= QC32dn(0x00, r); \
		a[0x02] ^= QC32up(0x10, r); \
		a[0x03] ^= QC32dn(0x10, r); \
		a[0x04] ^= QC32up(0x20, r); \
		a[0x05] ^= QC32dn(0x20, r); \
		a[0x06] ^= QC32up(0x30, r); \
		a[0x07] ^= QC32dn(0x30, r); \
		a[0x08] ^= QC32up(0x40, r); \
		a[0x09] ^= QC32dn(0x40, r); \
		a[0x0A] ^= QC32up(0x50, r); \
		a[0x0B] ^= QC32dn(0x50, r); \
		a[0x0C] ^= QC32up(0x60, r); \
		a[0x0D] ^= QC32dn(0x60, r); \
		a[0x0E] ^= QC32up(0x70, r); \
		a[0x0F] ^= QC32dn(0x70, r); \
		a[0x10] ^= QC32up(0x80, r); \
		a[0x11] ^= QC32dn(0x80, r); \
		a[0x12] ^= QC32up(0x90, r); \
		a[0x13] ^= QC32dn(0x90, r); \
		a[0x14] ^= QC32up(0xA0, r); \
		a[0x15] ^= QC32dn(0xA0, r); \
		a[0x16] ^= QC32up(0xB0, r); \
		a[0x17] ^= QC32dn(0xB0, r); \
		a[0x18] ^= QC32up(0xC0, r); \
		a[0x19] ^= QC32dn(0xC0, r); \
		a[0x1A] ^= QC32up(0xD0, r); \
		a[0x1B] ^= QC32dn(0xD0, r); \
		a[0x1C] ^= QC32up(0xE0, r); \
		a[0x1D] ^= QC32dn(0xE0, r); \
		a[0x1E] ^= QC32up(0xF0, r); \
		a[0x1F] ^= QC32dn(0xF0, r); \
		for (u = 0; u < 32; u += 8) { \
			RBTT(u + 0x00, (u + 0x01) & 0x1F, a, \
				(u + 0x02) & 0x1F, (u + 0x06) & 0x1F, \
				(u + 0x0A) & 0x1F, (u + 0x16) & 0x1F, \
				(u + 0x01) & 0x1F, (u + 0x05) & 0x1F, \
				(u + 0x09) & 0x1F, (u + 0x0D) & 0x1F); \
			RBTT(u + 0x02, (u + 0x03) & 0x1F, a, \
				(u + 0x04) & 0x1F, (u + 0x08) & 0x1F, \
				(u + 0x0C) & 0x1F, (u + 0x18) & 0x1F, \
				(u + 0x03) & 0x1F, (u + 0x07) & 0x1F, \
				(u + 0x0B) & 0x1F, (u + 0x0F) & 0x1F); \
			RBTT(u + 0x04, (u + 0x05) & 0x1F, a, \
				(u + 0x06) & 0x1F, (u + 0x0A) & 0x1F, \
				(u + 0x0E) & 0x1F, (u + 0x1A) & 0x1F, \
				(u + 0x05) & 0x1F, (u + 0x09) & 0x1F, \
				(u + 0x0D) & 0x1F, (u + 0x11) & 0x1F); \
			RBTT(u + 0x06, (u + 0x07) & 0x1F, a, \
				(u + 0x08) & 0x1F, (u + 0x0C) & 0x1F, \
				(u + 0x10) & 0x1F, (u + 0x1C) & 0x1F, \
				(u + 0x07) & 0x1F, (u + 0x0B) & 0x1F, \
				(u + 0x0F) & 0x1F, (u + 0x13) & 0x1F); \
		} \
		memcpy(a, t, sizeof t); \
	} while (0)

#define PERM_BIG_P(a)   do { \
		int r; \
		for (r = 0; r < 14; r ++) \
			ROUND_BIG_P(a, r); \
	} while (0)

#define PERM_BIG_Q(a)   do { \
		int r; \
		for (r = 0; r < 14; r ++) \
			ROUND_BIG_Q(a, r); \
	} while (0)

__global__ void kernelGroestl512(unsigned char *hashes) {
	int i;
	uint32 H[32];
	const int tid = blockIdx.x * blockDim.x + threadIdx.x;
	for (i = 0; i < 32; i++)
		H[i] = 0;
	H[31] = ((uint32)(512 & 0xFF) << 24) | ((uint32)(512 & 0xFF00) << 8);


	uint32 g[32], m[32];
	for (i = 0; i < 16; i++) {
		m[i] = dec32le2(hashes + (tid*64) + (i << 2)); 
		g[i] = m[i] ^ H[i];
	}
	for (i = 16; i < 32; i++) {
		m[i] = 0;
		g[i] = 0;
	}
	m[16] = 0x80; g[16] = m[16] ^ H[16];
	m[31] = 0x01000000; g[31] = m[31] ^ H[31];

	PERM_BIG_P(g); 
	PERM_BIG_Q(m); 
	
	for (i = 0; i < 32; i++) 
		H[i] ^= g[i] ^ m[i];

	/* final */
	uint32 x[32];

	for (i = 0; i < 32; i++)
		x[i] = H[i];
	PERM_BIG_P(x);

	for (i = 0; i < 32; i++)
		H[i] ^= x[i];

	for (i = 0; i < 16; i++)
		enc32le2(hashes + (tid*64) + (i << 2), H[i + 16]);

	//__syncthreads();
}